package site.benhnhan;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import java.sql.PreparedStatement;
import site.role.admin;
import site.role.doctor;
import site.role.letan;

/**
 *
 * @author Vu Nguyen
 */
public class benhnhan_manage extends javax.swing.JFrame {

    private javax.swing.JFrame parent;
    private String userCode;
    private String userRole;

    /**
     * Creates new form benhnhan_manage
     */
    public benhnhan_manage() {
        initComponents();
    }

    public benhnhan_manage(javax.swing.JFrame parent, String userCode, String userRole) {
        this.parent = parent;
        this.userCode = userCode;
        this.userRole = userRole;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btn_add1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        display_benhnhan = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        btn_refresh = new javax.swing.JButton();
        btn_add = new javax.swing.JButton();
        lb_benhnhan_code = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        btn_search = new javax.swing.JButton();
        btn_edit = new javax.swing.JButton();
        btn_delete = new javax.swing.JButton();
        btn_back = new javax.swing.JButton();

        btn_add1.setText("Thêm bệnh nhân");
        btn_add1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_add1ActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setText("Quản lý bệnh nhân");

        display_benhnhan.setColumns(20);
        display_benhnhan.setRows(5);
        jScrollPane1.setViewportView(display_benhnhan);

        jLabel2.setText("Danh sách bệnh nhân");

        btn_refresh.setText("Refresh");
        btn_refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_refreshActionPerformed(evt);
            }
        });

        btn_add.setText("Thêm bệnh nhân");
        btn_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_addActionPerformed(evt);
            }
        });

        jLabel3.setText("Nhập thông tin bệnh nhân");

        btn_search.setText("Tìm kiếm");
        btn_search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_searchActionPerformed(evt);
            }
        });

        btn_edit.setText("Sửa bệnh nhân");
        btn_edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_editActionPerformed(evt);
            }
        });

        btn_delete.setText("Xóa bệnh nhân");
        btn_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_deleteActionPerformed(evt);
            }
        });

        btn_back.setText("Back");
        btn_back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_backActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btn_back, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btn_add, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lb_benhnhan_code)
                            .addComponent(btn_search, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                            .addComponent(btn_edit, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                            .addComponent(btn_delete, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(27, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addGap(30, 30, 30)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_refresh))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(btn_back, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(btn_refresh))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(btn_add, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lb_benhnhan_code, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btn_search, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btn_edit, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btn_delete, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_refreshActionPerformed
        display_benhnhan.setText(""); // Xóa nội dung cũ

        String query = "SELECT * FROM patients";

        try {
            try (Connection conn = DBConnect.DatabaseConnection.getJDBConnection(); Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(query)) {

                while (rs.next()) {
                    String code = rs.getString("patient_code");
                    String name = rs.getString("full_name");
                    String dob = rs.getString("date_of_birth");
                    String gender = rs.getString("gender");
                    String address = rs.getString("address");
                    String phone = rs.getString("phone_number");
                    String email = rs.getString("email");

                    String info = String.format(
                            "Mã: %s\nTên: %s\nNgày sinh: %s\nGiới tính: %s\nĐịa chỉ: %s\nSĐT: %s\nEmail: %s\n------------------------------\n",
                            code, name, dob, gender, address, phone, email
                    );

                    display_benhnhan.append(info);
                }

            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Lỗi khi lấy danh sách bệnh nhân: " + e.getMessage());
        }
    }//GEN-LAST:event_btn_refreshActionPerformed

    private void btn_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_addActionPerformed
        add_benhnhan addForm = new add_benhnhan();
        addForm.setVisible(true);
        this.dispose(); // Đóng form hiện tại (nếu muốn)
    }//GEN-LAST:event_btn_addActionPerformed

    private void btn_add1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_add1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btn_add1ActionPerformed

    private void btn_searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_searchActionPerformed
        String input = lb_benhnhan_code.getText().trim();

        if (input.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập mã, tên hoặc số điện thoại bệnh nhân.");
            return;
        }

        String query = "SELECT * FROM patients WHERE patient_code = ? OR full_name LIKE ? OR phone_number = ?";

        try (Connection conn = DBConnect.DatabaseConnection.getJDBConnection(); PreparedStatement stmt = conn.prepareStatement(query)) {

            stmt.setString(1, input);
            stmt.setString(2, "%" + input + "%");  // LIKE cho tên
            stmt.setString(3, input);

            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    String code = rs.getString("patient_code");
                    String name = rs.getString("full_name");
                    String dob = rs.getString("date_of_birth");
                    String gender = rs.getString("gender");
                    String address = rs.getString("address");
                    String phone = rs.getString("phone_number");
                    String email = rs.getString("email");

                    String info = String.format(
                            "Mã: %s\nTên: %s\nNgày sinh: %s\nGiới tính: %s\nĐịa chỉ: %s\nSĐT: %s\nEmail: %s\n",
                            code, name, dob, gender, address, phone, email
                    );

                    display_benhnhan.setText(info);
                } else {
                    JOptionPane.showMessageDialog(this, "Không tìm thấy bệnh nhân phù hợp.");
                }
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Lỗi khi tìm kiếm: " + e.getMessage());
        }
    }//GEN-LAST:event_btn_searchActionPerformed

    private void btn_editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_editActionPerformed
        String code = lb_benhnhan_code.getText().trim();

        if (code.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập mã bệnh nhân.");
            return;
        }

        String query = "SELECT * FROM patients WHERE patient_code = ?";

        try (Connection conn = DBConnect.DatabaseConnection.getJDBConnection(); PreparedStatement pstmt = conn.prepareStatement(query)) {

            pstmt.setString(1, code);
            ResultSet rs = pstmt.executeQuery();

            if (rs.next()) {
                // Lấy thông tin bệnh nhân từ DB
                String name = rs.getString("full_name");
                String dob = rs.getString("date_of_birth");
                String gender = rs.getString("gender");
                String address = rs.getString("address");
                String phone = rs.getString("phone_number");
                String email = rs.getString("email");

                // Mở form edit với dữ liệu đã có
                edit_benhnhan editForm = new edit_benhnhan(code, name, dob, gender, address, phone, email);
                editForm.setVisible(true);
                this.dispose(); // đóng form hiện tại

            } else {
                JOptionPane.showMessageDialog(this, "Không tìm thấy bệnh nhân với mã: " + code);
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Lỗi khi lấy dữ liệu: " + e.getMessage());
        }
    }//GEN-LAST:event_btn_editActionPerformed

    private void btn_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_deleteActionPerformed
        String patientCode = lb_benhnhan_code.getText().trim();   // hoặc lấy từ JTable

        if (patientCode.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập/chọn mã bệnh nhân.");
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(
                this,
                "Xóa bệnh nhân " + patientCode + " và tất cả các cuộc hẹn?",
                "Xác nhận xóa",
                JOptionPane.YES_NO_OPTION);

        if (confirm != JOptionPane.YES_OPTION) {
            return;
        }

        String sqlDeleteAppt = "DELETE FROM appointments WHERE patient_code = ?";
        String sqlDeletePatient = "DELETE FROM patients     WHERE patient_code = ?";

        try (Connection conn = DBConnect.DatabaseConnection.getJDBConnection(); PreparedStatement stAppt = conn.prepareStatement(sqlDeleteAppt); PreparedStatement stPat = conn.prepareStatement(sqlDeletePatient)) {

            conn.setAutoCommit(false);          // bắt đầu transaction

            stAppt.setString(1, patientCode);   // xoá cuộc hẹn
            stAppt.executeUpdate();

            stPat.setString(1, patientCode);    // xoá bệnh nhân
            int rows = stPat.executeUpdate();

            conn.commit();                      // chốt giao dịch

            if (rows > 0) {
                JOptionPane.showMessageDialog(this, "Đã xóa thành công.");
                btn_refreshActionPerformed(evt); // tải lại danh sách
            } else {
                JOptionPane.showMessageDialog(this, "Không tìm thấy bệnh nhân.");
            }

        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Lỗi khi xóa: " + ex.getMessage());
        }
    }//GEN-LAST:event_btn_deleteActionPerformed

    private void btn_backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_backActionPerformed
        this.dispose(); // đóng cửa sổ hiện tại
        if (parent != null) {
            parent.setVisible(true); // mở lại form letan
        }

        switch (userRole.toLowerCase()) {
            case "admin" -> {
                if (parent != null) {
                    parent.setVisible(true);
                } else {
                    new admin(userCode).setVisible(true);
                }
            }

            case "doctor" -> {
                if (parent != null) {
                    parent.setVisible(true);
                } else {
                    new doctor(userCode).setVisible(true);
                }
            }

            case "letan" -> {
                if (parent != null) {
                    parent.setVisible(true);
                } else {
                    new letan(userCode).setVisible(true);
                }
            }
            default -> {
                if (parent != null) {
                    parent.setVisible(true);
                }
            }
        }
    }//GEN-LAST:event_btn_backActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(benhnhan_manage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(benhnhan_manage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(benhnhan_manage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(benhnhan_manage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new benhnhan_manage().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_add;
    private javax.swing.JButton btn_add1;
    private javax.swing.JButton btn_back;
    private javax.swing.JButton btn_delete;
    private javax.swing.JButton btn_edit;
    private javax.swing.JButton btn_refresh;
    private javax.swing.JButton btn_search;
    private javax.swing.JTextArea display_benhnhan;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField lb_benhnhan_code;
    // End of variables declaration//GEN-END:variables
}
