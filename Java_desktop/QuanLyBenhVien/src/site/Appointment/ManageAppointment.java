package site.Appointment;

import java.awt.HeadlessException;
import java.time.LocalDate;
import java.time.LocalTime;
import javax.swing.JOptionPane;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import javax.swing.JFrame;
import site.UserRole.admin;
import site.UserRole.doctor;
import site.UserRole.letan;

/**
 *
 * @author Vu Nguyen
 */
public class ManageAppointment extends javax.swing.JFrame {

    private javax.swing.JFrame parent;
    private String userCode;
    private String userRole;

    public ManageAppointment() {
        initComponents();
    }

    public ManageAppointment(javax.swing.JFrame parent, String userCode, String userRole) {
        this.parent = parent;
        this.userCode = userCode;
        this.userRole = userRole;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        cb_date_time = new com.github.lgooddatepicker.components.DateTimePicker();
        jScrollPane1 = new javax.swing.JScrollPane();
        lb_trieuchung = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        display_lichhen = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        btn_datlich = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        lb_patient_code = new javax.swing.JTextField();
        btn_refresh = new javax.swing.JButton();
        btn_back = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Ngày Giờ");
        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        lb_trieuchung.setColumns(20);
        lb_trieuchung.setRows(5);
        jScrollPane1.setViewportView(lb_trieuchung);

        jLabel2.setText("Triệu chứng");
        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        jLabel3.setText("Đặt lịch hẹn");
        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N

        display_lichhen.setColumns(20);
        display_lichhen.setRows(5);
        jScrollPane2.setViewportView(display_lichhen);

        jLabel4.setText("Lịch hẹn");
        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        btn_datlich.setText("Đặt lịch");
        btn_datlich.setBackground(new java.awt.Color(0, 153, 255));
        btn_datlich.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btn_datlich.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_datlichActionPerformed(evt);
            }
        });

        jLabel5.setText("Mã Bệnh Nhân");
        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        btn_refresh.setText("Refresh");
        btn_refresh.setBackground(new java.awt.Color(0, 153, 255));
        btn_refresh.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btn_refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_refreshActionPerformed(evt);
            }
        });

        btn_back.setText("Back");
        btn_back.setBackground(new java.awt.Color(0, 153, 255));
        btn_back.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btn_back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_backActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btn_back, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33))
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(92, 92, 92)
                        .addComponent(btn_datlich, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(cb_date_time, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lb_patient_code, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_refresh))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btn_back, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lb_patient_code, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cb_date_time, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btn_datlich, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(btn_refresh))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2)))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_datlichActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_datlichActionPerformed
        String patientCode = lb_patient_code.getText().trim();
        if (patientCode.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập mã bệnh nhân!");
            return;
        }

        LocalDate appointmentDate = cb_date_time.getDatePicker().getDate();
        LocalTime appointmentTime = cb_date_time.getTimePicker().getTime();

        if (appointmentDate == null || appointmentTime == null) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn đầy đủ ngày và giờ!");
            return;
        }

        String trieuchung = lb_trieuchung.getText().trim();
        if (trieuchung.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập triệu chứng!");
            return;
        }

        try {
            try (Connection conn = DBConnect.DatabaseConnection.getJDBConnection()) {
                if (conn == null) {
                    JOptionPane.showMessageDialog(this, "Không thể kết nối tới CSDL!");
                    return;
                }

                // 1. Lấy tên bệnh nhân theo patient_code
                String sqlGetName = "SELECT full_name FROM patients WHERE patient_code = ?";
                String fullName = null;
                try (PreparedStatement stmtGetName = conn.prepareStatement(sqlGetName)) {
                    stmtGetName.setString(1, patientCode);
                    var rs = stmtGetName.executeQuery();
                    if (rs.next()) {
                        fullName = rs.getString("full_name");
                    } else {
                        JOptionPane.showMessageDialog(this, "Không tìm thấy bệnh nhân với mã: " + patientCode);
                        return;
                    }
                }

                // 2. Lưu lịch hẹn (chú ý: cột appointment trong bảng của bạn dùng patient_code, không phải patient_id)
                String sqlInsert = "INSERT INTO hospital_management.appointments (patient_code, appointment_date, appointment_time, symptoms) VALUES (?, ?, ?, ?)";
                try (PreparedStatement stmtInsert = conn.prepareStatement(sqlInsert)) {
                    stmtInsert.setString(1, patientCode);
                    stmtInsert.setDate(2, java.sql.Date.valueOf(appointmentDate));
                    stmtInsert.setTime(3, java.sql.Time.valueOf(appointmentTime));
                    stmtInsert.setString(4, trieuchung);

                    stmtInsert.executeUpdate();
                }

                // 3. Hiển thị thông tin lịch hẹn kèm tên bệnh nhân
                String lichhen = "Bệnh nhân: " + fullName
                        + "\nMã BN: " + patientCode
                        + "\nNgày: " + appointmentDate
                        + "\nGiờ: " + appointmentTime
                        + "\nTriệu chứng: " + trieuchung
                        + "\n------------------------\n";
                display_lichhen.append(lichhen);

                JOptionPane.showMessageDialog(this, "Đặt lịch thành công!");

            }
        } catch (HeadlessException | SQLException e) {
            JOptionPane.showMessageDialog(this, "Lỗi khi lưu vào CSDL: " + e.getMessage());
        }
    }//GEN-LAST:event_btn_datlichActionPerformed

    private void btn_refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_refreshActionPerformed
        try (Connection conn = DBConnect.DatabaseConnection.getJDBConnection()) {
            if (conn == null) {
                JOptionPane.showMessageDialog(this, "Không thể kết nối tới CSDL!");
                return;
            }

            String query = """
            SELECT a.patient_code, p.full_name, a.appointment_date, a.appointment_time, a.symptoms
            FROM appointments a
            JOIN patients p ON a.patient_code = p.patient_code
            ORDER BY a.appointment_date DESC, a.appointment_time DESC
        """;

            try (PreparedStatement stmt = conn.prepareStatement(query); var rs = stmt.executeQuery()) {

                display_lichhen.setText(""); // Xóa nội dung cũ

                while (rs.next()) {
                    String patientCode = rs.getString("patient_code");
                    String fullName = rs.getString("full_name");
                    LocalDate date = rs.getDate("appointment_date").toLocalDate();
                    LocalTime time = rs.getTime("appointment_time").toLocalTime();
                    String symptoms = rs.getString("symptoms");

                    String appointmentInfo = "Bệnh nhân: " + fullName
                            + "\nMã BN: " + patientCode
                            + "\nNgày: " + date
                            + "\nGiờ: " + time
                            + "\nTriệu chứng: " + symptoms
                            + "\n------------------------\n";

                    display_lichhen.append(appointmentInfo);
                }

                if (display_lichhen.getText().isEmpty()) {
                    display_lichhen.setText("Không có lịch hẹn nào.");
                }
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Lỗi khi truy vấn lịch hẹn: " + e.getMessage());
        }
    }//GEN-LAST:event_btn_refreshActionPerformed

    private void btn_backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_backActionPerformed
        this.dispose(); // đóng cửa sổ hiện tại
        if (parent != null) {
            parent.setVisible(true); // mở lại form letan
        }

        switch (userRole.toLowerCase()) {
            case "admin" -> {
                if (parent != null) {
                    parent.setVisible(true);
                } else {
                    new admin(userCode).setVisible(true);
                }
            }

            case "doctor" -> {
                if (parent != null) {
                    parent.setVisible(true);
                } else {
                    new doctor(userCode).setVisible(true);
                }
            }

            case "letan" -> {
                if (parent != null) {
                    parent.setVisible(true);
                } else {
                    new letan(userCode).setVisible(true);
                }
            }
            default -> {
                if (parent != null) {
                    parent.setVisible(true);
                }
            }
        }
    }//GEN-LAST:event_btn_backActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageAppointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageAppointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageAppointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageAppointment.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ManageAppointment().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_back;
    private javax.swing.JButton btn_datlich;
    private javax.swing.JButton btn_refresh;
    private com.github.lgooddatepicker.components.DateTimePicker cb_date_time;
    private javax.swing.JTextArea display_lichhen;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField lb_patient_code;
    private javax.swing.JTextArea lb_trieuchung;
    // End of variables declaration//GEN-END:variables
}
