package site.role;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.LocalTime;
import javax.swing.JOptionPane;
import site.Login;
import DBConnect.PermissionService;
import java.util.List;
import java.util.Map;
import site.benhnhan.ManagePatient;
import site.lichhen.ManageAppointment;
import site.thuoc.CreateMedicines;
import site.thuoc.ManageMedicines;

/**
 *
 * @author Vu Nguyen
 */
public class Admin extends javax.swing.JFrame {

    private String userCode;

    private static final Map<String, String> permissionMap = Map.of(
            "Quản lý lịch hẹn", "Quản lý lịch hẹn",
            "Quản lý bệnh nhân", "Quản lý bệnh nhân",
            "Quản lý đơn thuốc", "Quản lý đơn thuốc",
            "Quản lý kho", "Quản lý kho"
    );
    private List<String> currentPermissions;

    public Admin() {
        initComponents();
    }

    public Admin(String userCode) {
        this.userCode = userCode;
        initComponents();
        loadPermissions();
    }

    private void loadPermissions() {
        cb_choose.removeAllItems();

        currentPermissions = PermissionService.getPermissionsByUserCode(userCode);

        if (currentPermissions.isEmpty()) {
            cb_choose.addItem("Không có quyền nào được cấp");
            cb_choose.setEnabled(false);
        } else {
            cb_choose.setEnabled(true);
            for (String perm : currentPermissions) {
                String displayName = permissionMap.getOrDefault(perm, perm);
                cb_choose.addItem(displayName);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jRadioButtonMenuItem1 = new javax.swing.JRadioButtonMenuItem();
        cb_choose = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        btn_choose = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        btn_refresh = new javax.swing.JButton();
        btn_logout = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        display_lichhen = new javax.swing.JTextArea();

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        jRadioButtonMenuItem1.setSelected(true);
        jRadioButtonMenuItem1.setText("jRadioButtonMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        cb_choose.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setText("ADMIN SITE");

        btn_choose.setText("Tiếp tục");
        btn_choose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_chooseActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("LỊCH HẸN");

        btn_refresh.setText("Refresh");
        btn_refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_refreshActionPerformed(evt);
            }
        });

        btn_logout.setBackground(new java.awt.Color(204, 0, 0));
        btn_logout.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btn_logout.setForeground(new java.awt.Color(255, 255, 255));
        btn_logout.setText("Logout");
        btn_logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_logoutActionPerformed(evt);
            }
        });

        display_lichhen.setColumns(20);
        display_lichhen.setRows(5);
        jScrollPane1.setViewportView(display_lichhen);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cb_choose, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn_choose))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btn_logout, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btn_refresh)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 336, Short.MAX_VALUE))
                .addGap(21, 21, 21))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(btn_logout, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cb_choose, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btn_choose)
                            .addComponent(jLabel2)
                            .addComponent(btn_refresh))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_refreshActionPerformed
        try (Connection conn = DBConnect.DatabaseConnection.getJDBConnection()) {
            if (conn == null) {
                JOptionPane.showMessageDialog(this, "Không thể kết nối tới CSDL!");
                return;
            }

            String query = """
            SELECT a.patient_code, p.full_name, a.appointment_date, a.appointment_time, a.symptoms
            FROM appointments a
            JOIN patients p ON a.patient_code = p.patient_code
            ORDER BY a.appointment_date DESC, a.appointment_time DESC
        """;

            try (PreparedStatement stmt = conn.prepareStatement(query); var rs = stmt.executeQuery()) {

                display_lichhen.setText(""); // Xóa nội dung cũ

                while (rs.next()) {
                    String patientCode = rs.getString("patient_code");
                    String fullName = rs.getString("full_name");
                    LocalDate date = rs.getDate("appointment_date").toLocalDate();
                    LocalTime time = rs.getTime("appointment_time").toLocalTime();
                    String symptoms = rs.getString("symptoms");

                    String appointmentInfo = "Bệnh nhân: " + fullName
                            + "\nMã BN: " + patientCode
                            + "\nNgày: " + date
                            + "\nGiờ: " + time
                            + "\nTriệu chứng: " + symptoms
                            + "\n------------------------\n";

                    display_lichhen.append(appointmentInfo);
                }

                if (display_lichhen.getText().isEmpty()) {
                    display_lichhen.setText("Không có lịch hẹn nào.");
                }
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Lỗi khi truy vấn lịch hẹn: " + e.getMessage());
        }
    }//GEN-LAST:event_btn_refreshActionPerformed

    private void btn_logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_logoutActionPerformed
        int confirm = JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn muốn đăng xuất?", "Xác nhận", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            this.setVisible(false); // Ẩn form hiện tại
            new Login().setVisible(true); // Mở lại trang login
        }
    }//GEN-LAST:event_btn_logoutActionPerformed

    private void btn_chooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_chooseActionPerformed
        int selectedIndex = cb_choose.getSelectedIndex();

        if (currentPermissions == null || currentPermissions.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Bạn không có quyền nào được cấp.");
            return;
        }

        if (selectedIndex < 0 || selectedIndex >= currentPermissions.size()) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn quyền hợp lệ.");
            return;
        }

        String selectedPermission = currentPermissions.get(selectedIndex);

        switch (selectedPermission) {
            case "Quản lý lịch hẹn" -> {
                this.setVisible(false);
                new ManageAppointment(this, userCode, "admin").setVisible(true);
            }
            case "Quản lý bệnh nhân" -> {
                this.setVisible(false);
                new ManagePatient(this, userCode, "admin").setVisible(true);
            }
            case "Quản lý kho" -> {
                this.setVisible(false);
                new ManageMedicines(this, userCode, "admin").setVisible(true);
            }
            case "Quản lý đơn thuốc" -> {
                this.setVisible(false);
                new CreateMedicines(this, userCode, "admin").setVisible(true);
            }
            default ->
                JOptionPane.showMessageDialog(this, "Quyền chưa được hỗ trợ.");
        }
    }//GEN-LAST:event_btn_chooseActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Admin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_choose;
    private javax.swing.JButton btn_logout;
    private javax.swing.JButton btn_refresh;
    private javax.swing.JComboBox<String> cb_choose;
    private javax.swing.JTextArea display_lichhen;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

}
